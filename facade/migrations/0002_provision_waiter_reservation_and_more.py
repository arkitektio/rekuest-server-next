# Generated by Django 4.2.4 on 2023-08-04 13:30

from django.db import migrations, models
import django.db.models.deletion
import django_choices_field.fields
import facade.enums
import uuid


class Migration(migrations.Migration):
    dependencies = [
        ("facade", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Provision",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "unique",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="A Unique identifier for this Topic",
                        unique=True,
                    ),
                ),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            (
                                "DENIED",
                                "Denied (Provision was rejected by the platform)",
                            ),
                            (
                                "PENDING",
                                "Pending (Request has been created and waits for its initial creation)",
                            ),
                            ("BOUND", "Bound (Provision was bound to an Agent)"),
                            (
                                "PROVIDING",
                                "Providing (Request has been send to its Agent and waits for Result",
                            ),
                            ("ACTIVE", "Active (Provision is currently active)"),
                            ("REFUSED", "Denied (Provision was rejected by the App)"),
                            (
                                "INACTIVE",
                                "Inactive (Provision is currently not active)",
                            ),
                            (
                                "CANCELING",
                                "Cancelling (Provisions is currently being cancelled)",
                            ),
                            (
                                "LOST",
                                "Lost (Subscribers to this Topic have lost their connection)",
                            ),
                            (
                                "RECONNECTING",
                                "Reconnecting (We are trying to Reconnect to this Topic)",
                            ),
                            (
                                "ERROR",
                                "Error (Reservation was not able to be performed (See StatusMessage)",
                            ),
                            (
                                "CRITICAL",
                                "Critical (Provision resulted in an critical system error)",
                            ),
                            (
                                "ENDED",
                                "Ended (Provision was cancelled by the Platform and will no longer create Topics)",
                            ),
                            (
                                "CANCELLED",
                                "Cancelled (Provision was cancelled by the User and will no longer create Topics)",
                            ),
                        ],
                        choices_enum=facade.enums.ProvisionStatusChoices,
                        default="INACTIVE",
                        help_text="The Status of this Provision",
                        max_length=1000,
                    ),
                ),
                (
                    "statusmessage",
                    models.CharField(
                        blank=True,
                        help_text="Clear Text status of the Provision as for now",
                        max_length=10000,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "permissions": [
                    ("can_link_to", "Can link a reservation to a provision")
                ],
            },
        ),
        migrations.CreateModel(
            name="Waiter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "installed_at",
                    models.DateTimeField(auto_created=True, auto_now_add=True),
                ),
                (
                    "name",
                    models.CharField(
                        default="Nana", help_text="This waiters Name", max_length=2000
                    ),
                ),
                ("instance_id", models.CharField(default="main", max_length=1000)),
                (
                    "unique",
                    models.CharField(
                        default=uuid.uuid4,
                        help_text="The Channel we are listening to",
                        max_length=1000,
                    ),
                ),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("KICKED", "Just kicked"),
                            ("DISCONNECTED", "Disconnected"),
                            (
                                "VANILLA",
                                "Complete Vanilla Scenario after a forced restart of",
                            ),
                        ],
                        choices_enum=facade.enums.WaiterStatusChoices,
                        default="VANILLA",
                        help_text="The Status of this Waiter",
                        max_length=1000,
                    ),
                ),
                (
                    "registry",
                    models.ForeignKey(
                        help_text="The provide might be limited to a instance like ImageJ belonging to a specific person. Is nullable for backend users",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="waiters",
                        to="facade.registry",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Reservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "unique",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="A Unique identifier for this Topic",
                        unique=True,
                    ),
                ),
                (
                    "allow_auto_request",
                    models.BooleanField(
                        default=False,
                        help_text="Allow automatic requests for this reservation",
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        blank=True,
                        help_text="A Short Hand Way to identify this reservation for the creating app",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="A Short Hand Way to identify this reservation for you",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "binds",
                    models.JSONField(
                        blank=True,
                        help_text="Params for the Policy (including Agent etc..)",
                        null=True,
                    ),
                ),
                (
                    "status",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            (
                                "ACTIVE",
                                "ACTIVE (Reservation is active and accepts assignments",
                            ),
                            (
                                "INACTIVE",
                                "INACTIVE (Reservation is connected but inactive and discards",
                            ),
                            (
                                "UNCONNECTED",
                                "UNCONNECTED (Reservation is lacking adequate connection to provision)",
                            ),
                            (
                                "ENDED",
                                "ENDED (Reservation is lacking and accepts assignments",
                            ),
                        ],
                        choices_enum=facade.enums.ReservationStatusChoices,
                        default="INACTIVE",
                        help_text="The Status of this Provision",
                        max_length=1000,
                    ),
                ),
                (
                    "statusmessage",
                    models.CharField(
                        blank=True,
                        help_text="Clear Text status of the Provision as for now",
                        max_length=1000,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "causing_provision",
                    models.ForeignKey(
                        blank=True,
                        help_text="Was this Reservation caused by a Provision?",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="caused_reservations",
                        to="facade.provision",
                    ),
                ),
                (
                    "node",
                    models.ForeignKey(
                        help_text="The node this reservation connects",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="facade.node",
                    ),
                ),
                (
                    "provisions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The Provisions this reservation connects",
                        null=True,
                        related_name="reservations",
                        to="facade.provision",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        help_text="The template this reservation connects",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="facade.template",
                    ),
                ),
                (
                    "waiter",
                    models.ForeignKey(
                        help_text="This Reservations app",
                        max_length=1000,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="facade.waiter",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="provision",
            name="causing_reservation",
            field=models.ForeignKey(
                blank=True,
                help_text="Reservation that created this provision (if we were auto created)",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_provisions",
                to="facade.reservation",
            ),
        ),
        migrations.AddField(
            model_name="provision",
            name="template",
            field=models.ForeignKey(
                blank=True,
                help_text="The Template for this Provision",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="provisions",
                to="facade.template",
            ),
        ),
        migrations.AddConstraint(
            model_name="waiter",
            constraint=models.UniqueConstraint(
                fields=("registry", "instance_id"),
                name="No multiple Waiters for same App and User allowed on same instance_id",
            ),
        ),
    ]
