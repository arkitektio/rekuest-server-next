# Generated by Django 5.2 on 2025-05-14 12:21

import django.db.models.deletion
import django_choices_field.fields
import facade.enums
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentikate', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IconPack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of this Protocol', max_length=1000, unique=True)),
                ('description', models.TextField(help_text='A description for the Protocol')),
            ],
        ),
        migrations.CreateModel(
            name='StateSchema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000)),
                ('hash', models.CharField(max_length=2000, unique=True)),
                ('ports', models.JSONField(default=dict)),
                ('description', models.CharField(max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=2000, unique=True)),
                ('label', models.CharField(max_length=2000)),
                ('description', models.CharField(max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defined_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('pure', models.BooleanField(default=False, help_text='Is this function pure. e.g can we cache the result?')),
                ('idempotent', models.BooleanField(default=False, help_text='Is this function idempotent. e.g can we run it multiple times without changing the data again ?')),
                ('stateful', models.BooleanField(default=False, help_text='Is this function stateful. e.g does it inherently depend on or change state (think physical devices)?')),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('FUNCTION', 'Function'), ('GENERATOR', 'Generator')], choices_enum=facade.enums.ActionKindChoices, default='FUNCTION', help_text='Function, generator? Will this function generate multiple results?', max_length=1000)),
                ('interfaces', models.JSONField(default=list, help_text='Interfaces that we use to interpret the meta data')),
                ('port_groups', models.JSONField(default=list, help_text='Intercae that we use to interpret the meta data')),
                ('name', models.CharField(help_text='The cleartext name of this Action', max_length=1000)),
                ('description', models.TextField(help_text='A description for the Action')),
                ('scope', models.CharField(default='GLOBAL', help_text='The scope of this Action. e.g. does the data it needs or produce live only in the scope of this Action or is it global or does it bridge data?', max_length=1000)),
                ('is_dev', models.BooleanField(default=False, help_text='Is this Action a development Action')),
                ('hash', models.CharField(help_text='The hash of the Action (completely unique)', max_length=1000, unique=True)),
                ('args', models.JSONField(default=list, help_text='Inputs for this Action')),
                ('returns', models.JSONField(default=list, help_text='Outputs for this Action')),
                ('is_test_for', models.ManyToManyField(blank=True, help_text='The users that have pinned the position', related_name='tests', to='facade.action')),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that pinned this Actions', related_name='pinned_actions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('name', models.CharField(default='Nana', help_text='This providers Name', max_length=2000)),
                ('extensions', models.JSONField(default=list, help_text='The extensions for this Agent', max_length=2000)),
                ('health_check_interval', models.IntegerField(default=300, help_text='How often should this agent be checked for its health. Defaults to 5 mins')),
                ('instance_id', models.CharField(default='main', max_length=1000)),
                ('unique', models.CharField(default=uuid.uuid4, help_text='The Channel we are listening to', max_length=1000)),
                ('on_instance', models.CharField(default='all', help_text='The Instance this Agent is running on', max_length=1000)),
                ('latest_event', django_choices_field.fields.TextChoicesField(choices=[('DISCONNECT', 'Disconnect (Agent disconnected)'), ('CONNECT', 'Connect (Agent connected)')], choices_enum=facade.enums.AgentEventChoices, default='DISCONNECT', help_text='The Status of this Agent', max_length=1000)),
                ('connected', models.BooleanField(default=False, help_text='Is this Agent connected to the backend')),
                ('last_seen', models.DateTimeField(help_text='The last time this Agent was seen', null=True)),
                ('blocked', models.BooleanField(default=False, help_text='If this Agent is blocked, it will not be used for provision, nor will it be able to provide')),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that pinned this Agent', related_name='pinned_agents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('can_provide_on', 'Can provide on this Agent')],
            },
        ),
        migrations.CreateModel(
            name='AgentEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.CharField(blank=True, max_length=2000, null=True)),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('DISCONNECT', 'Disconnect (Agent disconnected)'), ('CONNECT', 'Connect (Agent connected)')], choices_enum=facade.enums.AgentEventChoices, help_text='The event kind', max_length=1000)),
                ('level', django_choices_field.fields.TextChoicesField(blank=True, choices=[('DEBUG', 'DEBUG Level'), ('INFO', 'INFO Level'), ('ERROR', 'ERROR Level'), ('WARN', 'WARN Level')], choices_enum=facade.enums.LogLevelChoices, help_text='The event level', max_length=1000, null=True)),
                ('agent', models.ForeignKey(help_text='The agent', on_delete=django.db.models.deletion.CASCADE, related_name='events', to='facade.agent')),
            ],
        ),
        migrations.CreateModel(
            name='Assignation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ephemeral', models.BooleanField(default=False, help_text='Is this Assignation ephemeral (e.g. should it be deleted after its done or should it be kept for future reference)')),
                ('hooks', models.JSONField(default=list, help_text='hooks that are tight to the lifecycle of this assignation')),
                ('reference', models.CharField(default=uuid.uuid4, help_text='The Unique identifier of this Assignation considering its parent', max_length=1000)),
                ('args', models.JSONField(blank=True, default=dict, help_text='The Args', null=True)),
                ('latest_event_kind', django_choices_field.fields.TextChoicesField(choices=[('QUEUED', 'Queued (Assignation was queued for a reservation)'), ('BOUND', 'Bound (Assignation was bound to an Agent)'), ('ASSIGN', 'Assign (Agent accepted the Assignation)'), ('UNASSIGN', 'Unassign (Agent received the Assignation)'), ('PROGRESS', 'Progress (Agent is making progress on the Assignation)'), ('CANCELING', 'Unassign (Assignation was unassigned from an Agent)'), ('CANCELLED', 'Unassign (Assignation was unassigned from an Agent)'), ('INTERUPTING', 'Interupting (Assignation was interupted)'), ('INTERUPTED', 'Interupted (Assignation was interupted)'), ('ERROR', 'Error'), ('CRITICAL', 'Critical'), ('DISCONNECTED', 'Disconnected'), ('YIELD', 'Yields (Agent yielded the result)'), ('DONE', 'Done (Agent finished the Assignation)'), ('LOG', 'Log (Agent logged a message)')], choices_enum=facade.enums.AssignationEventChoices, help_text='The latest Status of this Provision (transitioned by events)', max_length=1000)),
                ('latest_instruct_kind', django_choices_field.fields.TextChoicesField(choices=[('ASSIGN', 'Assign (Agent accepted the Assignation)'), ('CANCEL', 'Unassign (Agent received the Assignation)'), ('STEP', 'Step (Agent is making progress on the Assignation)'), ('RESUME', 'Resume (Agent resumed the Assignation)'), ('PAUSE', 'Pause (Agent paused the Assignation)'), ('INTERRUPT', 'Interrupt (Agent interupted the Assignation)'), ('COLLECT', 'Collect instruction received')], choices_enum=facade.enums.AssignationInstructChoices, help_text='The latest Instruct of this Provision (transitioned by events)', max_length=1000)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the Provision as for now', max_length=1000)),
                ('is_done', models.BooleanField(default=False, help_text='Is this Assignation done (e.g. has it been completed and resulted in an error?)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.ForeignKey(help_text='The action this was assigned to', on_delete=django.db.models.deletion.CASCADE, to='facade.action')),
                ('agent', models.ForeignKey(help_text='This Assignation app', max_length=1000, on_delete=django.db.models.deletion.CASCADE, related_name='assignations', to='facade.agent')),
                ('parent', models.ForeignKey(blank=True, help_text='The Assignations parent (the one that created this (none if there is no parent))', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='facade.assignation')),
                ('root', models.ForeignKey(blank=True, help_text='The Root parent (the one that was created by the user (none if this is the root))', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='all_children', to='facade.assignation')),
            ],
        ),
        migrations.CreateModel(
            name='AssignationEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('returns', models.JSONField(blank=True, help_text='The returns of the events (true for yield events)', null=True)),
                ('progress', models.IntegerField(blank=True, help_text='The progress of the assignation (0-100) (set for yield events)', null=True)),
                ('message', models.CharField(blank=True, max_length=30000, null=True)),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('QUEUED', 'Queued (Assignation was queued for a reservation)'), ('BOUND', 'Bound (Assignation was bound to an Agent)'), ('ASSIGN', 'Assign (Agent accepted the Assignation)'), ('UNASSIGN', 'Unassign (Agent received the Assignation)'), ('PROGRESS', 'Progress (Agent is making progress on the Assignation)'), ('CANCELING', 'Unassign (Assignation was unassigned from an Agent)'), ('CANCELLED', 'Unassign (Assignation was unassigned from an Agent)'), ('INTERUPTING', 'Interupting (Assignation was interupted)'), ('INTERUPTED', 'Interupted (Assignation was interupted)'), ('ERROR', 'Error'), ('CRITICAL', 'Critical'), ('DISCONNECTED', 'Disconnected'), ('YIELD', 'Yields (Agent yielded the result)'), ('DONE', 'Done (Agent finished the Assignation)'), ('LOG', 'Log (Agent logged a message)')], choices_enum=facade.enums.AssignationEventChoices, help_text='The event kind', max_length=1000)),
                ('level', django_choices_field.fields.TextChoicesField(blank=True, choices=[('QUEUED', 'Queued (Assignation was queued for a reservation)'), ('BOUND', 'Bound (Assignation was bound to an Agent)'), ('ASSIGN', 'Assign (Agent accepted the Assignation)'), ('UNASSIGN', 'Unassign (Agent received the Assignation)'), ('PROGRESS', 'Progress (Agent is making progress on the Assignation)'), ('CANCELING', 'Unassign (Assignation was unassigned from an Agent)'), ('CANCELLED', 'Unassign (Assignation was unassigned from an Agent)'), ('INTERUPTING', 'Interupting (Assignation was interupted)'), ('INTERUPTED', 'Interupted (Assignation was interupted)'), ('ERROR', 'Error'), ('CRITICAL', 'Critical'), ('DISCONNECTED', 'Disconnected'), ('YIELD', 'Yields (Agent yielded the result)'), ('DONE', 'Done (Agent finished the Assignation)'), ('LOG', 'Log (Agent logged a message)')], choices_enum=facade.enums.AssignationEventChoices, help_text='The log level', max_length=1000, null=True)),
                ('assignation', models.ForeignKey(help_text='The reservation this log item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='events', to='facade.assignation')),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defined_at', models.DateTimeField(auto_created=True, auto_now_add=True, help_text='Date this Collection was created')),
                ('name', models.CharField(help_text='The name of this Collection', max_length=1000, unique=True)),
                ('description', models.TextField(help_text='A description for the Collection')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date this Collection was last updated')),
                ('creator', models.ForeignKey(help_text='The user that created this Collection', on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='action',
            name='collections',
            field=models.ManyToManyField(help_text='The collections this Action belongs to', related_name='actions', to='facade.collection'),
        ),
        migrations.CreateModel(
            name='FilesystemShelve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resource_id', models.CharField(default=uuid.uuid4, help_text='The Channel we are listening to', max_length=1000)),
                ('agents', models.ManyToManyField(help_text='The associated agent for this shelved item', related_name='filesystem_shelves', to='facade.agent')),
                ('creator', models.ForeignKey(help_text='The user that created this Shelf', on_delete=django.db.models.deletion.CASCADE, related_name='filesystem_shelves', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FileDrawer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_id', models.CharField(blank=True, help_text='The resource id of this drawer', max_length=1000, null=True)),
                ('identifier', models.CharField(help_text='The identifier of this drawer', max_length=1000)),
                ('label', models.CharField(max_length=1000, null=True)),
                ('description', models.TextField(null=True)),
                ('shelve', models.ForeignKey(help_text='The associated shelve for this drawer', on_delete=django.db.models.deletion.CASCADE, related_name='drawers', to='facade.filesystemshelve')),
            ],
        ),
        migrations.CreateModel(
            name='HardwareRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cpu_count', models.IntegerField(default=0)),
                ('cpu_vendor_name', models.CharField(default='Unknown', max_length=1000)),
                ('cpu_frequency', models.FloatField(default=0)),
                ('agent', models.ForeignKey(help_text='The associated agent for this HardwareRecord', on_delete=django.db.models.deletion.CASCADE, related_name='hardware_records', to='facade.agent')),
            ],
        ),
        migrations.CreateModel(
            name='Icon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon_url', models.CharField(max_length=10000)),
                ('hash', models.CharField(max_length=1000)),
                ('action', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='icons', to='facade.action')),
                ('pack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facade.iconpack')),
            ],
        ),
        migrations.CreateModel(
            name='Implementation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interface', models.CharField(help_text='Interface (think Function)', max_length=1000)),
                ('name', models.CharField(default='Unnamed', help_text='A name for this Implementation', max_length=1000)),
                ('extensions', models.JSONField(default=list, help_text='The attached extensions for this Implementation', max_length=2000)),
                ('extension', models.CharField(default='global', max_length=1000, verbose_name='Extension')),
                ('policy', models.JSONField(default=dict, help_text='The attached policy for this implementation', max_length=2000)),
                ('params', models.JSONField(default=dict, help_text='Params for this Implementation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dynamic', models.BooleanField(help_text='Dynamic Implementations will be able to create new reservations on runtime')),
                ('action', models.ForeignKey(help_text='The action this implementation is implementatig', on_delete=django.db.models.deletion.CASCADE, related_name='implementations', to='facade.action')),
                ('agent', models.ForeignKey(help_text='The associated registry for this Implementation', on_delete=django.db.models.deletion.CASCADE, related_name='implementations', to='facade.agent')),
                ('pinned_by', models.ManyToManyField(blank=True, help_text='The users that pinned this Agent', related_name='pinned_implementations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': [('providable', 'Can provide this implementation')],
            },
        ),
        migrations.CreateModel(
            name='Dependency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_hash', models.CharField(blank=True, help_text='The initial hash of the Action', max_length=1000, null=True)),
                ('reference', models.CharField(blank=True, help_text='A reference for this dependency', max_length=2000, null=True)),
                ('optional', models.BooleanField(default=False, help_text='Is this dependency optional (e.g. can we still use the implementation if this dependency is not met)')),
                ('binds', models.JSONField(blank=True, default=dict, help_text='The binds for this dependency (Determines which implementations can be used for this dependency)', null=True)),
                ('action', models.ForeignKey(blank=True, help_text='The action this dependency is for', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dependees', to='facade.action')),
                ('implementation', models.ForeignKey(help_text='The Implementation that has this dependency', on_delete=django.db.models.deletion.CASCADE, related_name='dependencies', to='facade.implementation')),
            ],
        ),
        migrations.AddField(
            model_name='assignation',
            name='implementation',
            field=models.ForeignKey(blank=True, help_text='Which implementation is the assignation currently mapped (can be reassigned)?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignations', to='facade.implementation'),
        ),
        migrations.CreateModel(
            name='MemoryShelve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent', models.OneToOneField(help_text='The associated agent for this memory shelve', on_delete=django.db.models.deletion.CASCADE, related_name='memory_shelve', to='facade.agent')),
                ('creator', models.ForeignKey(help_text='The user that created this Shelf', on_delete=django.db.models.deletion.CASCADE, related_name='shelves', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MemoryDrawer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_id', models.CharField(blank=True, help_text='The resource id of this drawer', max_length=1000, null=True)),
                ('identifier', models.CharField(help_text='The identifier of this drawer', max_length=1000)),
                ('label', models.CharField(max_length=1000, null=True)),
                ('description', models.TextField(null=True)),
                ('shelve', models.ForeignKey(help_text='The associated shelve for this drawer', on_delete=django.db.models.deletion.CASCADE, related_name='drawers', to='facade.memoryshelve')),
            ],
        ),
        migrations.AddField(
            model_name='action',
            name='protocols',
            field=models.ManyToManyField(blank=True, help_text='The protocols this Action implements (e.g. Predicate)', related_name='actions', to='facade.protocol'),
        ),
        migrations.CreateModel(
            name='Registry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client', models.ForeignKey(help_text='The Associated Client', on_delete=django.db.models.deletion.CASCADE, to='authentikate.client')),
                ('user', models.ForeignKey(help_text='The Associatsed User', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='agent',
            name='registry',
            field=models.ForeignKey(help_text='The provide might be limited to a instance like ImageJ belonging to a specific person. Is nullable for backend users', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='facade.registry'),
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique', models.UUIDField(default=uuid.uuid4, help_text='A Unique identifier for this Topic', unique=True)),
                ('saved_args', models.JSONField(default=dict)),
                ('strategy', django_choices_field.fields.TextChoicesField(choices=[('RANDOM', 'Random (Assignation is assigned to a random Provision)'), ('ROUND_ROBIN', 'Round Robin (Assignation is assigned to the next Provision)'), ('LEAST_BUSY', 'Least Busy (Assignation is assigned to the least busy Provision)'), ('LEAST_TIME', 'Least Time (Assignation is assigned to the Provision with the least time left)'), ('LEAST_LOAD', 'Least Load (Assignation is assigned to the Provision with the least load)'), ('DIRECT', 'Direct (Assignation is assigned to a direct Provision)')], choices_enum=facade.enums.ReservationStrategyChoices, default='RANDOM', help_text='The Strategy of this Reservation', max_length=1000)),
                ('allow_auto_request', models.BooleanField(default=False, help_text='Allow automatic requests for this reservation')),
                ('reference', models.CharField(blank=True, help_text='A Short Hand Way to identify this reservation for the creating app', max_length=200, null=True)),
                ('title', models.CharField(blank=True, help_text='A Short Hand Way to identify this reservation for you', max_length=200, null=True)),
                ('binds', models.JSONField(blank=True, help_text='Params for the Policy (including Agent etc..)', null=True)),
                ('statusmessage', models.CharField(blank=True, help_text='Clear Text status of the ssssssProvision as for now', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action', models.ForeignKey(help_text='The action this reservation connects', on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='facade.action')),
                ('causing_assignation', models.ForeignKey(blank=True, help_text='The assignation that created this reservation', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='caused_reservations', to='facade.assignation')),
                ('causing_dependency', models.ForeignKey(blank=True, help_text='Was this Reservation caused by a Dependency?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='caused_reservations', to='facade.dependency')),
                ('implementations', models.ManyToManyField(help_text='The implementations this reservation connects', related_name='reservations', to='facade.implementation')),
            ],
        ),
        migrations.AddField(
            model_name='assignation',
            name='reservation',
            field=models.ForeignKey(blank=True, help_text='Was this assigned through a reservation?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignations', to='facade.reservation'),
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interface', models.CharField(help_text='The interface this state is for (e.g. Function)', max_length=1000)),
                ('value', models.JSONField(default=dict, help_text=' The current value of this state')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date this State was first ever written to')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date this State was last updated')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='facade.agent')),
                ('state_schema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='facade.stateschema')),
            ],
        ),
        migrations.CreateModel(
            name='Panel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unnamed', max_length=2000)),
                ('kind', models.CharField(max_length=2000)),
                ('accessors', models.JSONField(blank=True, null=True)),
                ('submit_on_change', models.BooleanField(default=False)),
                ('submit_on_load', models.BooleanField(default=False)),
                ('implementation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='panels', to='facade.implementation')),
                ('reservation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='panels', to='facade.reservation')),
                ('state', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='panels', to='facade.state')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.JSONField(default=dict, help_text=' The  value of this state atht he time of creation')),
                ('archived_at', models.DateTimeField(auto_now_add=True, help_text='Date this State was archived')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historical_states', to='facade.state')),
            ],
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000)),
                ('ui_tree', models.JSONField(blank=True, null=True)),
                ('panels', models.ManyToManyField(related_name='dashboard', to='facade.panel')),
                ('structure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='facade.structure')),
            ],
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=2000, null=True)),
                ('description', models.CharField(blank=True, max_length=2000, null=True)),
                ('is_benchmark', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('action', models.ForeignKey(help_text='The action this test belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='facade.action')),
                ('tester', models.ForeignKey(help_text='The action that is testing this test', on_delete=django.db.models.deletion.CASCADE, related_name='testing_cases', to='facade.action')),
            ],
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passed', models.BooleanField(default=False)),
                ('result', models.JSONField(blank=True, default=dict, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='facade.testcase')),
                ('implementation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='testresults', to='facade.implementation')),
                ('tester', models.ForeignKey(help_text='The implementation that is testing this test', on_delete=django.db.models.deletion.CASCADE, related_name='testing_results', to='facade.implementation')),
            ],
        ),
        migrations.CreateModel(
            name='Toolbox',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(help_text='The user that created this Shortcut', on_delete=django.db.models.deletion.CASCADE, related_name='toolboxes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Shortcut',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
                ('description', models.TextField(blank=True, null=True)),
                ('saved_args', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('args', models.JSONField(default=list, help_text='Inputs for this Shortcut')),
                ('returns', models.JSONField(default=list, help_text='Outputs for this Shortcut')),
                ('allow_quick', models.BooleanField(default=False, help_text='Allow quick execution of this Shortcut (e.g. run without confirmation)')),
                ('use_returns', models.BooleanField(default=False, help_text='Use the result of this Shortcut (e.g. use the result in the next Shortcut)')),
                ('action', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shortcuts', to='facade.action')),
                ('creator', models.ForeignKey(help_text='The user that created this Shortcut', on_delete=django.db.models.deletion.CASCADE, related_name='shortcuts', to=settings.AUTH_USER_MODEL)),
                ('implementation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='shortcuts', to='facade.implementation')),
                ('toolbox', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shortcuts', to='facade.toolbox')),
            ],
        ),
        migrations.CreateModel(
            name='Waiter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installed_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('name', models.CharField(default='Nana', help_text='This waiters Name', max_length=2000)),
                ('instance_id', models.CharField(default='main', max_length=1000)),
                ('unique', models.CharField(default=uuid.uuid4, help_text='The Channel we are listening to', max_length=1000)),
                ('latest_event', django_choices_field.fields.TextChoicesField(choices=[('ACTIVE', 'Active'), ('KICKED', 'Just kicked'), ('DISCONNECTED', 'Disconnected'), ('VANILLA', 'Complete Vanilla Scenario after a forced restart of')], choices_enum=facade.enums.WaiterStatusChoices, default='VANILLA', help_text='The Status of this Waiter', max_length=1000)),
                ('registry', models.ForeignKey(help_text='The provide might be limited to a instance like ImageJ belonging to a specific person. Is nullable for backend users', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='waiters', to='facade.registry')),
            ],
        ),
        migrations.AddField(
            model_name='reservation',
            name='waiter',
            field=models.ForeignKey(blank=True, help_text='Which Waiter created this Reservation (if any?)', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='facade.waiter'),
        ),
        migrations.CreateModel(
            name='AssignationInstruct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('kind', django_choices_field.fields.TextChoicesField(choices=[('ASSIGN', 'Assign (Agent accepted the Assignation)'), ('CANCEL', 'Unassign (Agent received the Assignation)'), ('STEP', 'Step (Agent is making progress on the Assignation)'), ('RESUME', 'Resume (Agent resumed the Assignation)'), ('PAUSE', 'Pause (Agent paused the Assignation)'), ('INTERRUPT', 'Interrupt (Agent interupted the Assignation)'), ('COLLECT', 'Collect instruction received')], choices_enum=facade.enums.AssignationInstructChoices, help_text='The event kind', max_length=1000)),
                ('assignation', models.ForeignKey(help_text='The reservation this log item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='instructs', to='facade.assignation')),
                ('waiter', models.ForeignKey(blank=True, help_text='Which Waiter created this Instruction (if any?)', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instructions', to='facade.waiter')),
            ],
        ),
        migrations.AddField(
            model_name='assignation',
            name='waiter',
            field=models.ForeignKey(blank=True, help_text='This Assignation app', max_length=1000, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignations', to='facade.waiter'),
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000)),
                ('kind', models.CharField(max_length=2000)),
                ('hash', models.CharField(max_length=2000, unique=True)),
                ('values', models.JSONField(blank=True, null=True)),
                ('structure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='facade.structure')),
            ],
        ),
        migrations.AddConstraint(
            model_name='implementation',
            constraint=models.UniqueConstraint(fields=('interface', 'agent'), name='A implementation has unique versions for every action it trys to implement'),
        ),
        migrations.AddConstraint(
            model_name='registry',
            constraint=models.UniqueConstraint(fields=('client', 'user'), name='No multiple Registries for same App and User allowed'),
        ),
        migrations.AddConstraint(
            model_name='agent',
            constraint=models.UniqueConstraint(fields=('registry', 'instance_id'), name='No multiple Agents for same App and User allowed on same identifier'),
        ),
        migrations.AddConstraint(
            model_name='state',
            constraint=models.UniqueConstraint(fields=('interface', 'agent'), name='No multiple States for same Agent and Schema allowed'),
        ),
        migrations.AddConstraint(
            model_name='testcase',
            constraint=models.UniqueConstraint(fields=('action', 'tester'), name='No multiple Tests for same Action and Tester allowed'),
        ),
        migrations.AddConstraint(
            model_name='waiter',
            constraint=models.UniqueConstraint(fields=('registry', 'instance_id'), name='No multiple Waiters for same App and User allowed on same instance_id'),
        ),
    ]
